{"version":3,"file":"static/js/615.7bb7c151.chunk.js","mappings":"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","sources":["components/projects/weather/weather-add-form/WeatherAddForm.jsx","components/projects/weather/weather-favor-list-item/WeatherFavorListItem.jsx","components/projects/weather/weather-favor-list/WeatherFavorList.jsx","components/projects/weather/weather-tabs/WeatherTabs.jsx","components/projects/weather/weather-app/WeatherApp.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport {\r\n  fetchCityWeather,\r\n  fetchForecast,\r\n} from '../../../../store/weather/weather';\r\n\r\nimport './WeatherAddForm.scss';\r\n\r\nconst validate = (values) => {\r\n  const errors = {};\r\n\r\n  if (!values.weatherInput) {\r\n    errors.weatherInput = 'This field is required!';\r\n  } else if (values.weatherInput.length < 2) {\r\n    errors.weatherInput = 'Minimum 2 symbols!';\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nconst WeatherAddForm = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      weatherInput: '',\r\n    },\r\n\r\n    validate,\r\n    onSubmit: ({ weatherInput }, { resetForm }) => {\r\n      dispatch(fetchCityWeather(weatherInput));\r\n      dispatch(fetchForecast(weatherInput));\r\n      resetForm(formik.initialValues);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className='WeatherAddForm'>\r\n      <form className='WeatherAddForm-form' onSubmit={formik.handleSubmit}>\r\n        <input\r\n          className='WeatherAddForm-form__input'\r\n          type='text'\r\n          name='weatherInput'\r\n          placeholder='Enter the city'\r\n          maxLength='38'\r\n          value={formik.values.weatherInput}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n        />\r\n        <button className='WeatherAddForm-form__btn' type='submit' />\r\n      </form>\r\n      {formik.touched.weatherInput && formik.errors.weatherInput ? (\r\n        <div className='WeatherAddForm-error'>{formik.errors.weatherInput}</div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherAddForm;\r\n","import { useDispatch } from 'react-redux';\r\n\r\nimport {\r\n  fetchCityWeather,\r\n  fetchForecast,\r\n} from '../../../../store/weather/weather';\r\n\r\nimport './WeatherFavorListItem.scss';\r\n\r\nconst WeatherFavorListItem = ({ onDeleteFavor, name }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <li\r\n        onClick={() => {\r\n          dispatch(fetchCityWeather(name));\r\n          dispatch(fetchForecast(name));\r\n        }}\r\n        className='WeatherFavorListItem'\r\n      >\r\n        {name}\r\n        <div onClick={onDeleteFavor} className='WeatherFavorListItem-delete'>\r\n          <span className='WeatherFavorListItem-delete__element'></span>\r\n        </div>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherFavorListItem;\r\n","import { useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport { deleteFavorCity } from '../../../../store/weather/favorListSlice';\r\n\r\nimport WeatherFavorListItem from '../weather-favor-list-item/WeatherFavorListItem';\r\nimport './WeatherFavorList.scss';\r\n\r\nconst WeatherFavorList = () => {\r\n  const { favorList } = useSelector((state) => state.weatherFavorList);\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteFavor = useCallback(\r\n    (itemName) => {\r\n      dispatch(deleteFavorCity(itemName));\r\n    },\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const renderElements = (arr) => {\r\n    if (arr.length === 0) {\r\n      return (\r\n        <CSSTransition timeout={1500} classNames='favorItem-transition'>\r\n          <li className='WeatherFavorListItem-empty'>\r\n            <p className='WeatherFavorListItem-empty__text'>\r\n              Locations not found.\r\n            </p>\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    }\r\n\r\n    return arr.map(({ name }) => (\r\n      <CSSTransition\r\n        key={name}\r\n        timeout={1500}\r\n        classNames='favorItem-transition'\r\n      >\r\n        <WeatherFavorListItem\r\n          onDeleteFavor={() => onDeleteFavor(name)}\r\n          key={name}\r\n          name={name}\r\n        />\r\n      </CSSTransition>\r\n    ));\r\n  };\r\n\r\n  const elements = renderElements(favorList);\r\n\r\n  return (\r\n    <div className='WeatherFavorList'>\r\n      <div className='WeatherFavorList__title'>Added Locations:</div>\r\n      <TransitionGroup component='ul' className='WeatherFavorList__cities'>\r\n        {elements}\r\n      </TransitionGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherFavorList;\r\n","import { useState, lazy, Suspense } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeActiveTab } from '../../../../store/weather/weather';\r\nimport './WeatherTabs.scss';\r\n\r\nconst WeatherNow = lazy(() =>\r\n  import('./weather-content/weather-now/WeatherNow')\r\n);\r\nconst WeatherDetails = lazy(() =>\r\n  import('./weather-content/weather-details/WeatherDetails')\r\n);\r\nconst WeatherForecast = lazy(() =>\r\n  import('./weather-content/weather-forecast/WeatherForecast')\r\n);\r\n\r\nconst tabButtons = [\r\n  { id: 'Now', label: 'Now', clazzName: 'Tab-btn' },\r\n  { id: 'Details', label: 'Details', clazzName: 'Tab-btn' },\r\n  { id: 'Forecast', label: 'Forecast', clazzName: 'Tab-btn' },\r\n];\r\n\r\nconst WeatherTabs = () => {\r\n  const { activeTab } = useSelector((state) => state.weather);\r\n  const dispatch = useDispatch();\r\n\r\n  const tabs = tabButtons.map(({ id, label, clazzName }) => {\r\n    return (\r\n      <button\r\n        id={id}\r\n        key={id}\r\n        onClick={() => dispatch(changeActiveTab(id))}\r\n        className={\r\n          activeTab === id ? `${clazzName} Tab-btn--active` : clazzName\r\n        }\r\n      >\r\n        {label}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className='WeatherTabs'>\r\n      <WeatherNow />\r\n      <WeatherDetails />\r\n      <WeatherForecast />\r\n      <div className='Tabs'>{tabs}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherTabs;\r\n","import { useDispatch } from 'react-redux';\r\nimport { changeActivePage } from '../../../../store/page/pageSlice';\r\n\r\nimport WeatherAddForm from '../weather-add-form/WeatherAddForm';\r\nimport WeatherFavorList from '../weather-favor-list/WeatherFavorList';\r\nimport WeatherTabs from '../weather-tabs/WeatherTabs';\r\nimport './WeatherApp.scss';\r\n\r\nconst WeatherApp = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className='Weather'>\r\n      <div className='Weather-wrapper'>\r\n        <div className='Weather-container'>\r\n          <WeatherTabs />\r\n          <div className='Weather-second'>\r\n            <WeatherAddForm />\r\n            <WeatherFavorList />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='Weather-home'>\r\n        <button\r\n          onClick={() => dispatch(changeActivePage('default'))}\r\n          className='Weather-home__btn'\r\n        >\r\n          Нажми, чтобы вернуться назад\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherApp;\r\n"],"names":["validate","values","errors","weatherInput","length","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","resetForm","fetchCityWeather","fetchForecast","className","handleSubmit","type","name","placeholder","maxLength","value","onChange","handleChange","onBlur","handleBlur","touched","onDeleteFavor","onClick","arr","favorList","useSelector","state","weatherFavorList","useCallback","itemName","deleteFavorCity","elements","CSSTransition","timeout","classNames","map","TransitionGroup","component","WeatherNow","lazy","WeatherDetails","WeatherForecast","tabButtons","id","label","clazzName","activeTab","weather","tabs","changeActiveTab","changeActivePage"],"sourceRoot":""}