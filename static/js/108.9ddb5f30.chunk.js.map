{"version":3,"file":"static/js/108.9ddb5f30.chunk.js","mappings":"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","sources":["components/projects/todo/todo-header/TodoHeader.jsx","components/projects/todo/todo-search-panel/TodoSearchPanel.jsx","components/projects/todo/todo-list-item/TodoListItem.jsx","components/projects/todo/todo-list/TodoList.jsx","components/projects/todo/todo-add-form/TodoAddForm.jsx","components/projects/todo/todo-app/TodoApp.jsx"],"sourcesContent":["import './TodoHeader.scss';\r\n\r\nconst TodoHeader = ({ todo, done }) => {\r\n  return (\r\n    <div className='TodoHeader'>\r\n      <h2 className='TodoHeader__title'>Todo List</h2>\r\n      <div className='TodoHeader-info'>\r\n        <p className='TodoHeader-info__desk'>\r\n          <span className='TodoHeader-info__desk--active'>{`${todo} `}</span>\r\n          more to do\r\n        </p>\r\n        <p className='TodoHeader-info__desk'>\r\n          <span className='TodoHeader-info__desk--active'>{`${done} `}</span>\r\n          done\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoHeader;\r\n","import './TodoSearchPanel.scss';\r\n\r\nconst TodoSearchPanel = () => {\r\n  return (\r\n    <div className='TodoSearchPanel'>\r\n      <input\r\n        className='TodoSearchPanel__input'\r\n        placeholder='type to search'\r\n        type='text'\r\n      />\r\n      <button className='TodoSearchPanel__btn TodoSearchPanel__btn--active'>\r\n        All\r\n      </button>\r\n      <button className='TodoSearchPanel__btn'>Active</button>\r\n      <button className='TodoSearchPanel__btn'>Done</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoSearchPanel;\r\n","import './TodoListItem.scss';\r\n\r\nconst TodoListItem = ({\r\n  id,\r\n  index,\r\n  text,\r\n  important,\r\n  done,\r\n  removeTodoItem,\r\n  onToggleValue,\r\n}) => {\r\n  return (\r\n    <li\r\n      className={\r\n        important ? 'TodoListItem TodoListItem--important' : 'TodoListItem'\r\n      }\r\n    >\r\n      <p\r\n        className={\r\n          done\r\n            ? 'TodoListItem__text TodoListItem__text--done'\r\n            : 'TodoListItem__text'\r\n        }\r\n        onClick={() => onToggleValue(id, 'done')}\r\n      >\r\n        {' '}\r\n        <span\r\n          className={\r\n            done\r\n              ? 'TodoListItem__index TodoListItem__index--done'\r\n              : 'TodoListItem__index'\r\n          }\r\n        >{` ${index + 1} `}</span>\r\n        {text}\r\n      </p>\r\n      <div className='TodoListItem-buttons'>\r\n        <button\r\n          className='TodoListItem-buttons-btn TodoListItem-buttons-btn-delete'\r\n          onClick={() => removeTodoItem(id)}\r\n          id={id}\r\n        />\r\n        <button\r\n          onClick={() => onToggleValue(id, 'important')}\r\n          className='TodoListItem-buttons-btn TodoListItem-buttons-btn-important'\r\n        />\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TodoListItem;\r\n","import { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport TodoListItem from '../todo-list-item/TodoListItem';\r\n\r\nimport './TodoList.scss';\r\n\r\nconst TodoList = ({ todoList, setTodoList }) => {\r\n  const removeTodoItem = (id) => {\r\n    setTodoList([...todoList.filter((todo) => todo.id !== id)]);\r\n  };\r\n  const onToggleValue = (id, propName) => {\r\n    const idx = todoList.findIndex((todo) => todo.id === id);\r\n    const oldItem = todoList[idx];\r\n    const newItem = { ...oldItem, [propName]: !oldItem[propName] };\r\n    setTodoList([\r\n      ...todoList.slice(0, idx),\r\n      newItem,\r\n      ...todoList.slice(idx + 1),\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <div className='TodoList'>\r\n      <TransitionGroup component='ul' className='TodoList-list'>\r\n        {todoList.map((listProps, i) => (\r\n          <CSSTransition\r\n            key={listProps.id}\r\n            timeout={500}\r\n            classNames='item-transition'\r\n          >\r\n            <TodoListItem\r\n              removeTodoItem={removeTodoItem}\r\n              onToggleValue={onToggleValue}\r\n              index={i}\r\n              key={listProps.id}\r\n              {...listProps}\r\n            />\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import { useFormik } from 'formik';\r\n\r\nimport './TodoAddForm.scss';\r\n\r\nconst validate = (values) => {\r\n  const errors = {};\r\n\r\n  if (!values.todo) {\r\n    errors.todo = 'Укажите дело!';\r\n  } else if (values.todo.length < 4) {\r\n    errors.todo = 'Минимум 4 символа.';\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nconst TodoAddForm = ({ addTodoItem }) => {\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      todo: '',\r\n    },\r\n\r\n    validate,\r\n    onSubmit: (values, { resetForm }) => {\r\n      addTodoItem(values);\r\n      resetForm(formik.initialValues);\r\n    },\r\n  });\r\n  return (\r\n    <form className='TodoAddForm' onSubmit={formik.handleSubmit}>\r\n      <input\r\n        id='todo'\r\n        name='todo'\r\n        type='text'\r\n        className='TodoAddForm__input'\r\n        placeholder='What needs to be done?'\r\n        value={formik.values.todo}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n      />\r\n      <button type='submit' className='TodoAddForm__btn'>\r\n        Add\r\n      </button>\r\n      {formik.touched.todo && formik.errors.todo ? (\r\n        <div className='TodoAddForm-error'>{formik.errors.todo}</div>\r\n      ) : null}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoAddForm;\r\n","import { useState, useEffect } from 'react';\r\nimport ToDoHeader from '../todo-header/TodoHeader';\r\nimport TodoSearchPanel from '../todo-search-panel/TodoSearchPanel';\r\nimport TodoList from '../todo-list/TodoList';\r\nimport TodoAddForm from '../todo-add-form/TodoAddForm';\r\n\r\nimport './TodoApp.scss';\r\n\r\nconst ToDoApp = () => {\r\n  const [todoList, setTodoList] = useState([\r\n    {\r\n      id: 1,\r\n      text: 'Сделай чертов туду лист, срочно! Я устал ждать!',\r\n      important: false,\r\n      done: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      text: 'Попить пивка!',\r\n      important: true,\r\n      done: false,\r\n    },\r\n  ]);\r\n  const [countTodo, setCountTodo] = useState(null);\r\n  const [countDone, setCountDone] = useState(null);\r\n  const [counterId, setCounterId] = useState(3);\r\n\r\n  useEffect(() => {\r\n    setCountTodo(todoList.length - countDone);\r\n  }, [todoList, countDone]);\r\n\r\n  useEffect(() => {\r\n    setCountDone(todoList.filter((todo) => todo.done).length);\r\n  }, [todoList]);\r\n\r\n  const addTodoItem = ({ todo }) => {\r\n    setTodoList([\r\n      ...todoList,\r\n      { id: counterId, text: todo, important: false, done: true },\r\n    ]);\r\n    setCounterId(counterId + 1);\r\n  };\r\n\r\n  return (\r\n    <div className='Todo'>\r\n      <div className='Todo-wrapper'>\r\n        <div className='Todo-container'>\r\n          <ToDoHeader todo={countTodo} done={countDone} />\r\n          <TodoSearchPanel />\r\n          <TodoList todoList={todoList} setTodoList={setTodoList} />\r\n          <TodoAddForm addTodoItem={addTodoItem} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoApp;\r\n\r\n// import { useState } from 'react';\r\n// import { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\n// import './ToDoApp.scss';\r\n\r\n// const ToDoApp = () => {\r\n//   const [text, setText] = useState('');\r\n//   const [todoList, setTodoList] = useState([\r\n//     { id: 1, text: 'Сделай чертов туду лист' },\r\n//   ]);\r\n//   const [counterId, setCounterId] = useState(2);\r\n\r\n//   const addTodoItem = () => {\r\n//     const validateText = text === '' ? 'Some text' : text;\r\n//     setTodoList([...todoList, { id: counterId, text: validateText }]);\r\n//     setCounterId(counterId + 1);\r\n//     setText('');\r\n//   };\r\n\r\n//   const removeTodoItem = (id) => {\r\n//     setTodoList([...todoList.filter((todo) => todo.id !== id)]);\r\n//   };\r\n\r\n//   return (\r\n//     <div className='ToDo'>\r\n//       <div className='ToDo-container'>\r\n//         <div className='ToDo-header'>\r\n//           <div className='ToDo-header'>\r\n//             <input\r\n//               className='ToDo-header__input'\r\n//               onChange={(e) => setText(e.target.value)}\r\n//               value={text}\r\n//               placeholder='Введите текст'\r\n//               type='text'\r\n//             />\r\n//             <button className='ToDo-header__btn' onClick={() => addTodoItem()}>\r\n//               Добавить дело\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//         <div className='ToDo-body'>\r\n//           <TransitionGroup component='ul' className='ToDo-list'>\r\n//             {todoList.map((listProps, i) => (\r\n//               <CSSTransition\r\n//                 key={listProps.id}\r\n//                 timeout={500}\r\n//                 classNames='item-transition'\r\n//                 onEnter={() => console.log('Enter')}\r\n//                 onExit={() => console.log('Exit')}\r\n//               >\r\n//                 <ToDoItem\r\n//                   removeTodoItem={removeTodoItem}\r\n//                   index={i}\r\n//                   key={listProps.id}\r\n//                   {...listProps}\r\n//                 />\r\n//               </CSSTransition>\r\n//             ))}\r\n//           </TransitionGroup>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const ToDoItem = ({ id, index, text, removeTodoItem }) => {\r\n//   return (\r\n//     <li onClick={() => removeTodoItem(id)} id={id} className='ToDo-list__item'>\r\n//       {`${index + 1}: ${text}`}\r\n//     </li>\r\n//   );\r\n// };\r\n\r\n// export default ToDoApp;\r\n"],"names":["todo","done","className","placeholder","type","id","index","text","important","removeTodoItem","onToggleValue","onClick","todoList","setTodoList","filter","propName","idx","findIndex","oldItem","newItem","slice","TransitionGroup","component","map","listProps","i","CSSTransition","timeout","classNames","validate","values","errors","length","addTodoItem","formik","useFormik","initialValues","onSubmit","resetForm","handleSubmit","name","value","onChange","handleChange","onBlur","handleBlur","touched","useState","countTodo","setCountTodo","countDone","setCountDone","counterId","setCounterId","useEffect"],"sourceRoot":""}