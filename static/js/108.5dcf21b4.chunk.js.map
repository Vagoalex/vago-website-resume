{"version":3,"file":"static/js/108.5dcf21b4.chunk.js","mappings":"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","sources":["components/projects/todo/todo-header/TodoHeader.jsx","components/projects/todo/todo-search-panel/TodoSearchPanel.jsx","components/projects/todo/todo-list-item/TodoListItem.jsx","components/projects/todo/todo-list/TodoList.jsx","components/projects/todo/todo-add-form/TodoAddForm.jsx","components/projects/todo/todo-app/TodoApp.jsx"],"sourcesContent":["import './TodoHeader.scss';\r\n\r\nconst TodoHeader = ({ todo, done }) => {\r\n  return (\r\n    <div className='TodoHeader'>\r\n      <h2 className='TodoHeader__title'>Todo List</h2>\r\n      <div className='TodoHeader-info'>\r\n        <p className='TodoHeader-info__desk'>\r\n          <span className='TodoHeader-info__desk--active'>{`${todo} `}</span>\r\n          more to do\r\n        </p>\r\n        <p className='TodoHeader-info__desk'>\r\n          <span className='TodoHeader-info__desk--active'>{`${done} `}</span>\r\n          done\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoHeader;\r\n","import './TodoSearchPanel.scss';\r\n\r\nconst filterButtons = [\r\n  { id: 1, label: 'All' },\r\n  { id: 2, label: 'Active' },\r\n  { id: 3, label: 'Done' },\r\n];\r\n\r\nconst TodoSearchPanel = ({ status, statusFilter }) => {\r\n  const defaultBtnClasses = 'TodoSearchPanel__btn';\r\n  const activeBtnClasses = 'TodoSearchPanel__btn TodoSearchPanel__btn--active';\r\n\r\n  return (\r\n    <div className='TodoSearchPanel'>\r\n      {filterButtons.map(({ id, label }) => {\r\n        return (\r\n          <button\r\n            key={id}\r\n            className={status === label ? activeBtnClasses : defaultBtnClasses}\r\n            data-status={label}\r\n            onClick={(e) => statusFilter(e.target.getAttribute('data-status'))}\r\n          >\r\n            {label}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoSearchPanel;\r\n","import './TodoListItem.scss';\r\n\r\nconst TodoListItem = ({\r\n  id,\r\n  index,\r\n  text,\r\n  important,\r\n  done,\r\n  removeTodoItem,\r\n  onToggleValue,\r\n}) => {\r\n  return (\r\n    <li\r\n      className={\r\n        important ? 'TodoListItem TodoListItem--important' : 'TodoListItem'\r\n      }\r\n      style={\r\n        done\r\n          ? { border: '1px solid rgb(9, 255, 0)', color: 'rgb(9, 255, 0)' }\r\n          : null\r\n      }\r\n    >\r\n      <p\r\n        className={\r\n          done\r\n            ? 'TodoListItem__text TodoListItem__text--done'\r\n            : 'TodoListItem__text'\r\n        }\r\n        onClick={() => onToggleValue(id, 'done')}\r\n      >\r\n        {' '}\r\n        <span\r\n          className={\r\n            done\r\n              ? 'TodoListItem__index TodoListItem__index--done'\r\n              : 'TodoListItem__index'\r\n          }\r\n        >{` ${index + 1} `}</span>\r\n        {text}\r\n      </p>\r\n      <div className='TodoListItem-buttons'>\r\n        <button\r\n          className='TodoListItem-buttons-btn TodoListItem-buttons-btn-delete'\r\n          onClick={() => removeTodoItem(id)}\r\n          id={id}\r\n        />\r\n        <button\r\n          onClick={() => onToggleValue(id, 'important')}\r\n          className='TodoListItem-buttons-btn TodoListItem-buttons-btn-important'\r\n        />\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TodoListItem;\r\n","import { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport TodoListItem from '../todo-list-item/TodoListItem';\r\n\r\nimport './TodoList.scss';\r\n\r\nconst TodoList = ({ todoList, setTodoList }) => {\r\n  const removeTodoItem = (id) => {\r\n    setTodoList([...todoList.filter((todo) => todo.id !== id)]);\r\n  };\r\n\r\n  const onToggleValue = (id, propName) => {\r\n    const idx = todoList.findIndex((todo) => todo.id === id);\r\n    const oldItem = todoList[idx];\r\n    const newItem = { ...oldItem, [propName]: !oldItem[propName] };\r\n    setTodoList([\r\n      ...todoList.slice(0, idx),\r\n      newItem,\r\n      ...todoList.slice(idx + 1),\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <div className='TodoList'>\r\n      <TransitionGroup component='ul' className='TodoList-list'>\r\n        {todoList.map((listProps, i) => (\r\n          <CSSTransition\r\n            key={listProps.id}\r\n            timeout={500}\r\n            classNames='item-transition'\r\n          >\r\n            <TodoListItem\r\n              removeTodoItem={removeTodoItem}\r\n              onToggleValue={onToggleValue}\r\n              index={i}\r\n              key={listProps.id}\r\n              {...listProps}\r\n            />\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import { useFormik } from 'formik';\r\n\r\nimport './TodoAddForm.scss';\r\n\r\nconst validate = (values) => {\r\n  const errors = {};\r\n\r\n  if (!values.todo) {\r\n    errors.todo = 'Укажите дело!';\r\n  } else if (values.todo.length < 4) {\r\n    errors.todo = 'Минимум 4 символа.';\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nconst TodoAddForm = ({ addTodoItem }) => {\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      todo: '',\r\n    },\r\n\r\n    validate,\r\n    onSubmit: (values, { resetForm }) => {\r\n      addTodoItem(values);\r\n      resetForm(formik.initialValues);\r\n    },\r\n  });\r\n  return (\r\n    <form className='TodoAddForm' onSubmit={formik.handleSubmit}>\r\n      <input\r\n        id='todo'\r\n        name='todo'\r\n        type='text'\r\n        className='TodoAddForm__input'\r\n        placeholder='What needs to be done?'\r\n        value={formik.values.todo}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n      />\r\n      <button type='submit' className='TodoAddForm__btn'>\r\n        Add\r\n      </button>\r\n      {formik.touched.todo && formik.errors.todo ? (\r\n        <div className='TodoAddForm-error'>{formik.errors.todo}</div>\r\n      ) : null}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoAddForm;\r\n","import { useState, useEffect } from 'react';\r\nimport ToDoHeader from '../todo-header/TodoHeader';\r\nimport TodoSearchPanel from '../todo-search-panel/TodoSearchPanel';\r\nimport TodoList from '../todo-list/TodoList';\r\nimport TodoAddForm from '../todo-add-form/TodoAddForm';\r\n\r\nimport './TodoApp.scss';\r\n\r\nconst defaultTodos = [\r\n  {\r\n    id: 1,\r\n    text: 'Сделай чертов туду лист, срочно! Я устал ждать!',\r\n    important: false,\r\n    done: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    text: 'Попить пивка для рывка!',\r\n    important: true,\r\n    done: false,\r\n  },\r\n];\r\n\r\nconst ToDoApp = () => {\r\n  // const [todoList, setTodoList] = useState(defaultTodos);\r\n  const [todoList, setTodoList] = useState(() => {\r\n    const localData = localStorage.getItem('todoList');\r\n    return localData ? JSON.parse(localData) : defaultTodos;\r\n  });\r\n\r\n  const [filteredList, setFilteredList] = useState([]);\r\n\r\n  const [status, setStatus] = useState('All');\r\n\r\n  const [countTodo, setCountTodo] = useState(null);\r\n  const [countDone, setCountDone] = useState(null);\r\n  const [counterId, setCounterId] = useState(3);\r\n\r\n  useEffect(() => {\r\n    setCountTodo(todoList.length - countDone);\r\n  }, [todoList, countDone]);\r\n\r\n  useEffect(() => {\r\n    setCountDone(todoList.filter((todo) => todo.done).length);\r\n  }, [todoList]);\r\n\r\n  useEffect(() => {\r\n    setFilteredList(todoList);\r\n    localStorage.setItem('todoList', JSON.stringify(todoList));\r\n  }, [todoList]);\r\n\r\n  const addTodoItem = ({ todo }) => {\r\n    setTodoList([\r\n      ...todoList,\r\n      { id: counterId, text: todo, important: false, done: false },\r\n    ]);\r\n    setCounterId(counterId + 1);\r\n  };\r\n\r\n  const statusFilter = (statusState) => {\r\n    setStatus(statusState);\r\n    todoFilter(statusState);\r\n  };\r\n\r\n  const todoFilter = (statusState) => {\r\n    switch (statusState) {\r\n      case 'All':\r\n        setFilteredList(todoList);\r\n        break;\r\n      case 'Active':\r\n        setFilteredList(todoList.filter((todo) => !todo.done));\r\n        break;\r\n      case 'Done':\r\n        setFilteredList(todoList.filter((todo) => todo.done));\r\n        break;\r\n\r\n      default:\r\n        setFilteredList(todoList);\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='Todo'>\r\n      <div className='Todo-wrapper'>\r\n        <div className='Todo-container'>\r\n          <ToDoHeader todo={countTodo} done={countDone} />\r\n          <TodoSearchPanel\r\n            statusFilter={statusFilter}\r\n            todoList={todoList}\r\n            status={status}\r\n          />\r\n          <TodoList\r\n            todoList={filteredList}\r\n            status={status}\r\n            setTodoList={setTodoList}\r\n          />\r\n          <TodoAddForm addTodoItem={addTodoItem} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoApp;\r\n\r\n// import { useState } from 'react';\r\n// import { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\n// import './ToDoApp.scss';\r\n\r\n// const ToDoApp = () => {\r\n//   const [text, setText] = useState('');\r\n//   const [todoList, setTodoList] = useState([\r\n//     { id: 1, text: 'Сделай чертов туду лист' },\r\n//   ]);\r\n//   const [counterId, setCounterId] = useState(2);\r\n\r\n//   const addTodoItem = () => {\r\n//     const validateText = text === '' ? 'Some text' : text;\r\n//     setTodoList([...todoList, { id: counterId, text: validateText }]);\r\n//     setCounterId(counterId + 1);\r\n//     setText('');\r\n//   };\r\n\r\n//   const removeTodoItem = (id) => {\r\n//     setTodoList([...todoList.filter((todo) => todo.id !== id)]);\r\n//   };\r\n\r\n//   return (\r\n//     <div className='ToDo'>\r\n//       <div className='ToDo-container'>\r\n//         <div className='ToDo-header'>\r\n//           <div className='ToDo-header'>\r\n//             <input\r\n//               className='ToDo-header__input'\r\n//               onChange={(e) => setText(e.target.value)}\r\n//               value={text}\r\n//               placeholder='Введите текст'\r\n//               type='text'\r\n//             />\r\n//             <button className='ToDo-header__btn' onClick={() => addTodoItem()}>\r\n//               Добавить дело\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//         <div className='ToDo-body'>\r\n//           <TransitionGroup component='ul' className='ToDo-list'>\r\n//             {todoList.map((listProps, i) => (\r\n//               <CSSTransition\r\n//                 key={listProps.id}\r\n//                 timeout={500}\r\n//                 classNames='item-transition'\r\n//                 onEnter={() => console.log('Enter')}\r\n//                 onExit={() => console.log('Exit')}\r\n//               >\r\n//                 <ToDoItem\r\n//                   removeTodoItem={removeTodoItem}\r\n//                   index={i}\r\n//                   key={listProps.id}\r\n//                   {...listProps}\r\n//                 />\r\n//               </CSSTransition>\r\n//             ))}\r\n//           </TransitionGroup>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const ToDoItem = ({ id, index, text, removeTodoItem }) => {\r\n//   return (\r\n//     <li onClick={() => removeTodoItem(id)} id={id} className='ToDo-list__item'>\r\n//       {`${index + 1}: ${text}`}\r\n//     </li>\r\n//   );\r\n// };\r\n\r\n// export default ToDoApp;\r\n"],"names":["todo","done","className","filterButtons","id","label","status","statusFilter","map","onClick","e","target","getAttribute","index","text","important","removeTodoItem","onToggleValue","style","border","color","todoList","setTodoList","filter","propName","idx","findIndex","oldItem","newItem","slice","TransitionGroup","component","listProps","i","CSSTransition","timeout","classNames","validate","values","errors","length","addTodoItem","formik","useFormik","initialValues","onSubmit","resetForm","handleSubmit","name","type","placeholder","value","onChange","handleChange","onBlur","handleBlur","touched","defaultTodos","useState","localData","localStorage","getItem","JSON","parse","filteredList","setFilteredList","setStatus","countTodo","setCountTodo","countDone","setCountDone","counterId","setCounterId","useEffect","setItem","stringify","todoFilter","statusState"],"sourceRoot":""}